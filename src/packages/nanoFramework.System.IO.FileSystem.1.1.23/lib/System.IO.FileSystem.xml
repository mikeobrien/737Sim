<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.IO.FileSystem</name>
    </assembly>
    <members>
        <member name="T:System.IO.Directory">
            <summary>
            Class for managing directories
            </summary>
        </member>
        <member name="M:System.IO.Directory.GetLogicalDrives">
            <summary>
            Determines a list of available logical drives.
            </summary>
            <returns>String[] of available drives, ex. "D:\\"</returns>
        </member>
        <member name="M:System.IO.Directory.CreateDirectory(System.String)">
            <summary>
            Creates directory with the provided path.
            </summary>
            <param name="path">Path and name of the directory to create.</param>
            <exception cref="T:System.IO.IOException">Path for creating the folder doesn't exist. This method does not create directories recursively.</exception>
        </member>
        <member name="M:System.IO.Directory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes directory from storage.
            </summary>
            <param name="path">Path to the directory to be removed.</param>
            <param name="recursive">Parameter to be implemented.</param>
            <exception cref="T:System.IO.IOException">This method will throw DirectoryNotEmpty exception if folder is not empty.</exception>
        </member>
        <member name="M:System.IO.Directory.Exists(System.String)">
            <summary>
            Determines whether the specified directory exists.
            </summary>
            <param name="path">Path to the directory.</param>
            <returns>True if directory under given path exists, otherwise it returns false.</returns>
            <exception cref="T:System.ArgumentNullException">Path must be defined.</exception>
            <exception cref="T:System.IO.IOException">Invalid drive or path to the parent folder doesn't exist.</exception>
        </member>
        <member name="M:System.IO.Directory.Move(System.String,System.String)">
            <summary>
            Moves directory from specified path to a new location.
            </summary>
            <param name="sourcePath">Name of directory to move. Absolute path.</param>
            <param name="destinationPath">New path and name for the directory.</param>
            <exception cref="T:System.Exception">Source directory not existing or destination folder already existing.</exception>
        </member>
        <member name="M:System.IO.Directory.GetFiles(System.String)">
            <summary>
            List files from the specified folder.
            </summary>
            <param name="path">Path to the directory to list files from.</param>
            <returns>
            When this method completes successfully, it returns a array of paths of the files in the given folder. 
            </returns>
            <exception cref="T:System.IO.IOException"> Logical drive or a directory under given path does not exist. </exception>
        </member>
        <member name="M:System.IO.Directory.GetDirectories(System.String)">
            <summary>
            List directories from the specified folder.
            </summary>
            <param name="path"></param>
            <returns> 
            When this method completes successfully, it returns an array of absolute paths to the subfolders in the specified directory.
            </returns>
            <exception cref="T:System.IO.IOException"> Logical drive or a directory under given path does not exist. </exception>
        </member>
        <member name="M:System.IO.Directory.GetLastWriteTime(System.String)">
            <summary>
            Determines the time of the last write/modification to directory under given path.
            </summary>
            <param name="path"></param>
            <returns>Time of the last write/modification.</returns>
            <exception cref="T:System.IO.IOException"> Logical drive or a directory under given path does not exist. </exception>
        </member>
        <member name="T:System.IO.File">
            <summary>
            Class for creating FileStream objects, and some basic file management
            routines such as Delete, etc.
            </summary>
        </member>
        <member name="M:System.IO.File.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
            <exception cref="T:System.ArgumentException">sourceFileName or destFileName is null or empty</exception>
        </member>
        <member name="M:System.IO.File.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
            <exception cref="T:System.ArgumentException">sourceFileName or destFileName is null or empty</exception>
        </member>
        <member name="M:System.IO.File.Create(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.File.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted. Wild-card characters are not supported.</param>
            <exception cref="T:System.ArgumentNullException">Path must be defined.</exception>
            <exception cref="T:System.IO.IOException">Directory not found. or Not allowed to delete ReadOnly Files. or Not allowed to delete Directories.</exception>
        </member>
        <member name="M:System.IO.File.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.File.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move. Absolute path.</param>
            <param name="destFileName">The new path and name for the file.</param>
            <exception cref="T:System.Exception">Source File not existing or Destination File already existing.</exception>
        </member>
        <member name="M:System.IO.File.GetAttributes(System.String)">
            <summary>
            Gets the FileAttributes of the file on the path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The FileAttributes of the file on the path.</returns>
            <exception cref="T:System.IO.IOException">File not found.</exception>
        </member>
        <member name="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file on the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes">A bitwise combination of the enumeration values.</param>
        </member>
        <member name="M:System.IO.File.GetLastWriteTime(System.String)">
            <summary>
            Determines the time of the last write/modification to file under given path.
            </summary>
            <param name="path"></param>
            <returns>Time of the last write/modification.</returns>
            <exception cref="T:System.IO.IOException"> Logical drive or a file under given path does not exist. </exception>
        </member>
        <member name="T:System.IO.FileAccess">
            <summary>
            Contains constants for specifying the access you want for a file.
            You can have Read, Write or ReadWrite access.
            </summary>
        </member>
        <member name="F:System.IO.FileAccess.Read">
            <summary>
            Specifies read access to the file. Data can be read from the file and
            the file pointer can be moved. Combine with WRITE for read-write access.
            </summary>
        </member>
        <member name="F:System.IO.FileAccess.Write">
            <summary>
            Specifies write access to the file. Data can be written to the file and
            the file pointer can be moved. Combine with READ for read-write access.
            </summary>
        </member>
        <member name="F:System.IO.FileAccess.ReadWrite">
            <summary>
            Specifies read and write access to the file. Data can be written to the
            file and the file pointer can be moved. Data can also be read from the
            file.
            </summary>
        </member>
        <member name="T:System.IO.FileAttributes">
            <summary>
            Provides attributes for files and directories.
            </summary>
        </member>
        <member name="F:System.IO.FileAttributes.ReadOnly">
            <summary>
            The file is read-only.
            </summary>
        </member>
        <member name="F:System.IO.FileAttributes.Hidden">
            <summary>
            The file is hidden, and thus is not included in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:System.IO.FileAttributes.System">
            <summary>
            The file is a system file. That is, the file is part of the operating system or is used exclusively by the operating system.
            </summary>
        </member>
        <member name="F:System.IO.FileAttributes.Directory">
            <summary>
            The file is a directory.
            </summary>
        </member>
        <member name="F:System.IO.FileAttributes.Archive">
            <summary>
            This file is marked to be included in incremental backup operation.
            </summary>
        </member>
        <member name="T:System.IO.FileMode">
             <summary>
             Contains constants for specifying how the OS should open a file.
             These will control whether you overwrite a file, open an existing
             file, or some combination thereof.
            
             To append to a file, use Append (which maps to OpenOrCreate then we seek
             to the end of the file).  To truncate a file or create it if it doesn't
             exist, use Create.
             </summary>
        </member>
        <member name="F:System.IO.FileMode.CreateNew">
            <summary>
            Creates a new file. An exception is raised if the file already exists.
            </summary>
        </member>
        <member name="F:System.IO.FileMode.Create">
            <summary>
            Creates a new file. If the file already exists, it is overwritten.
            </summary>
        </member>
        <member name="F:System.IO.FileMode.Open">
            <summary>
            Opens an existing file. An exception is raised if the file does not exist.
            </summary>
        </member>
        <member name="F:System.IO.FileMode.OpenOrCreate">
            <summary>
            Opens the file if it exists. Otherwise, creates a new file.
            </summary>
        </member>
        <member name="F:System.IO.FileMode.Truncate">
            <summary>
            Opens an existing file. Once opened, the file is truncated so that its
            size is zero bytes. The calling process must open the file with at least
            WRITE access. An exception is raised if the file does not exist.
            </summary>
        </member>
        <member name="F:System.IO.FileMode.Append">
            <summary>
            Opens the file if it exists and seeks to the end.  Otherwise,
            creates a new file.
            </summary>
        </member>
        <member name="T:System.IO.FileShare">
            <summary>
            Contains constants for controlling file sharing options while
            opening files.  You can specify what access other processes trying
            to open the same file concurrently can have.
            </summary>
        </member>
        <member name="F:System.IO.FileShare.None">
            <summary>
            No sharing. Any request to open the file (by this process or another
            process) will fail until the file is closed.
            </summary>
        </member>
        <member name="F:System.IO.FileShare.Read">
            <summary>
            Allows subsequent opening of the file for reading. If this flag is not
            specified, any request to open the file for reading (by this process or
            another process) will fail until the file is closed.
            </summary>
        </member>
        <member name="F:System.IO.FileShare.Write">
            <summary>
            Allows subsequent opening of the file for writing. If this flag is not
            specified, any request to open the file for writing (by this process or
            another process) will fail until the file is closed.
            </summary>
        </member>
        <member name="F:System.IO.FileShare.ReadWrite">
            <summary>
            Allows subsequent opening of the file for writing or reading. If this flag
            is not specified, any request to open the file for writing or reading (by
            this process or another process) will fail until the file is closed.
            </summary>
        </member>
        <member name="T:System.IO.FileStream">
            <summary>
            Provides a Stream for a file, supporting both synchronous and asynchronous read and write operations.
            </summary>
        </member>
        <member name="P:System.IO.FileStream.CanRead">
            <summary>
            Gets a value that indicates whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:System.IO.FileStream.CanSeek">
            <summary>
            Gets a value that indicates whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:System.IO.FileStream.CanWrite">
            <summary>
            Gets a value that indicates whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:System.IO.FileStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:System.IO.FileStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="P:System.IO.FileStream.Name">
            <summary>
            Gets the name of the file including the file name extension.
            </summary>
            <value>
            The name of the file including the file name extension.
            </value>
        </member>
        <member name="P:System.IO.FileStream.FilePath">
            <summary>
            Gets the full file-system path of the current file, if the file has a path.
            </summary>
        </member>
        <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path and creation mode.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">One of the enumeration values that determines how to open or create the file.</param>
        </member>
        <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, and read/write permission.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">One of the enumeration values that determines how to open or create the file.</param>
            <param name="access">A bitwise combination of the enumeration values that determines how the file can be accessed by the FileStream object. This also determines the values returned by the CanRead and CanWrite properties of the FileStream object.</param>
        </member>
        <member name="M:System.IO.FileStream.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:System.IO.FileStream.Close">
            <summary>
            Closes the current stream and releases any resources associated with the current stream.
            </summary>
        </member>
        <member name="M:System.IO.FileStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the FileStream and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.IO.FileStream.Flush">
            <summary>
            Clears buffers for this stream and causes any buffered data to be written to the file.
            </summary>
        </member>
        <member name="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which the read bytes will be placed.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:System.IO.FileStream.ReadByte">
            <summary>
            Reads a byte from the file and advances the read position one byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for offset, using a value of type SeekOrigin.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:System.IO.FileStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="value">The new length of the stream.</param>
        </member>
        <member name="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the file stream.
            </summary>
            <param name="buffer">The buffer containing data to write to the stream.</param>
            <param name="offset">The zero-based byte offset in array from which to begin copying bytes to the stream.</param>
            <param name="count">The maximum number of bytes to write.</param>
        </member>
        <member name="M:System.IO.FileStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            </summary>
            <param name="value">A byte to write to the stream.</param>
        </member>
        <member name="T:System.IO.Path">
            <summary>
            Performs operations on String instances that contain file or directory path information.
            </summary>
        </member>
        <member name="F:System.IO.Path.DirectorySeparatorChar">
            <summary>
            Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="F:System.IO.Path.InvalidPathChars">
            <summary>
            Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the Path class.
            </summary>
        </member>
        <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the extension of a file path. The <code>path</code> parameter
            specifies a file path, and the<code> extension</code> parameter
            specifies a file extension (with a leading period, such as
            <code>".exe"</code> or<code>".cool"</code>).
            
            The function returns a file path with the same root, directory, and base
            name parts as <code>path</code>, but with the file extension changed to
            the specified extension.If<code>path</code> is null, the function
            returns null. If<code> path</code> does not contain a file extension,
            the new file extension is appended to the path.If<code>extension</code>
            is null, any existing extension is removed from <code>path</code>.
            </summary>
            <param name="path">The path for which to change file extension.</param>
            <param name="extension">The new file extension (with a leading period), or null to remove the extension.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.Path.GetDirectoryName(System.String)">
            <summary>
            Returns the directory path of a file path. This method effectively
            removes the last element of the given file path, i.e.it returns a
            string consisting of all characters up to but not including the last
            backslash("\") in the file path. The returned value is null if the file
            path is null or if the file path denotes a root (such as "\", "C:", or
            "\\server\share").
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>The directory path of the given path, or null if the given path denotes a root.</returns>
        </member>
        <member name="M:System.IO.Path.GetRootLength(System.String)">
            <summary>
            Gets the length of the root DirectoryInfo or whatever DirectoryInfo markers
            are specified for the first part of the DirectoryInfo name.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.IO.Path.GetInvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
            <returns>An array containing the characters that are not allowed in path names.</returns>
        </member>
        <member name="M:System.IO.Path.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.Path.GetExtension(System.String)">
            <summary>
            Returns the extension of the given path. The returned value includes the
            period(".") character of the extension except when you have a terminal period when you get String.Empty, such as <code>".exe"</code> or
            <code>".cpp"</code>. The returned value is null if the given path is
            null or if the given path does not include an extension.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>The extension of the given path, or null if the given path does not include an extension.</returns>
            <exception cref="T:System.ArgumentException">if <var>path</var> contains invalid characters.</exception>
        </member>
        <member name="M:System.IO.Path.GetFileName(System.String)">
            <summary>
            Returns the name and extension parts of the given path. The resulting
            string contains the characters of<code> path</code> that follow the last
            backslash ("\"), slash ("/"), or colon (":") character in
            <code>path</code>.The resulting string is the entire path if <code>path</code>
            contains no backslash after removing trailing slashes, slash, or colon characters.The resulting
            string is null if <code>path</code> is null.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>The name and extension parts of the given path.</returns>
            <exception cref="T:System.ArgumentException">if <var>path</var> contains invalid characters.</exception>
        </member>
        <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path of the file.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.Path.GetPathRoot(System.String)">
            <summary>
            Tests if a path includes a file extension. The result is
            <code>true</code> if the characters that follow the last directory
            separator('\\' or '/') or volume separator(':') in the path include
            a period(".") other than a terminal period.The result is <code>false</code> otherwise.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>The root portion of the given path.</returns>
            <exception cref="T:System.ArgumentException">if <var>path</var> contains invalid characters.</exception>
        </member>
        <member name="M:System.IO.Path.HasExtension(System.String)">
            <summary>
            Tests if a path includes a file extension. The result is
            <code>true</code> if the characters that follow the last directory
            separator('\\' or '/') or volume separator(':') in the path include
            a period(".") other than a terminal period.The result is <code>false</code> otherwise.
            </summary>
            <param name="path">The path to test.</param>
            <returns>Boolean indicating whether the path includes a file extension.</returns>
            <exception cref="T:System.ArgumentException">if <var>path</var> contains invalid characters.</exception>
        </member>
        <member name="M:System.IO.Path.IsPathRooted(System.String)">
            <summary>
            Tests if the given path contains a root. A path is considered rooted
            if it starts with a backslash("\") or a drive letter and a colon (":").
            </summary>
            <param name="path">The path to test.</param>
            <returns>Boolean indicating whether the path is rooted.</returns>
            <exception cref="T:System.ArgumentException">if <var>path</var> contains invalid characters.</exception>
        </member>
        <member name="M:System.IO.Path.Combine(System.String,System.String)">
            <summary>
            Combines two strings into a path.
            </summary>
            <param name="path1">The first path to combine.</param>
            <param name="path2">The second path to combine.</param>
            <returns></returns>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.SDCard">
            <summary>
            Class to allow a SD memory card to be configured and mounted on the system.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.CardType">
            <summary>
            Type of interface used by SDCard.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.IsMounted">
            <summary>
            Indicates if the SD card has been mounted
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.CardDetectEnabled">
            <summary>
            Return true if Card detection is enabled
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.MmcParameters">
            <summary>
            The parameters for a MMC connected SD card.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.SpiParameters">
            <summary>
            The parameters for a SPI connected SD card. 
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.IsCardDetected">
            <summary>
            Indicates if SD card has been detected if optional cardDetectPin parameter is enabled with a valid GPIO pin.
            If not enabled will always return false.
            </summary>
            <remarks>
            Not all SD Card modules have a card detect pin or the pin connected to a GPIO pin. 
            </remarks>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.SDCard.SDCardMmcParameters">
            <summary>
            Parameter used for creating a MMC card instance.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDCardMmcParameters.dataWidth">
            <summary>
            Data width to use on MMC SD protocol.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDCardMmcParameters.enableCardDetectPin">
            <summary>
            Set true when an Card Detect Pin is used. 
            The cardDetectPin parameter must have a valid GPIO pin.
            </summary>
            <remarks>
            Not all SD Card modules have a card detect pin or the pin connected to a GPIO pin. 
            </remarks>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDCardMmcParameters.cardDetectPin">
            <summary>
            The optional card detect GPIO pin which must be set to a valid pin if EnableCardDetectPin is true.
            If defined a StorageEventManager event will be raised when a card is inserted or removed.
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.SDCard.SDCardSpiParameters">
            <summary>
            Parameter used for creating a SPI card instance.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDCardSpiParameters.spiBus">
            <summary>
            The SPI bus to use for SD Card.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDCardSpiParameters.chipSelectPin">
            <summary>
            The chip select pin to use for SD Card.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDCardSpiParameters.enableCardDetectPin">
            <summary>
            Set true when an Card Detect Pin is used. 
            The cardDetectPin parameter must have a valid GPIO pin.
            </summary>
            <remarks>
            Not all SD Card modules have a card detect pin or the pin connected to a GPIO pin. 
            </remarks>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDCardSpiParameters.cardDetectPin">
            <summary>
            The optional card detect GPIO pin which must be set to a valid pin if EnableCardDetectPin is true.
            If defined a StorageEventManager event will be raised when a card is inserted or removed.
            </summary>
        </member>
        <member name="M:nanoFramework.System.IO.FileSystem.SDCard.#ctor">
            <summary>
            Creates an instance of SDcard where parameters have already been defined in firmware. 
            </summary>
        </member>
        <member name="M:nanoFramework.System.IO.FileSystem.SDCard.#ctor(nanoFramework.System.IO.FileSystem.SDCard.SDCardMmcParameters)">
            <summary>
            Create an instance of SDCard for a MMC connected SD card.
            </summary>
            <param name="parameters">Connection parameters</param>
        </member>
        <member name="M:nanoFramework.System.IO.FileSystem.SDCard.#ctor(nanoFramework.System.IO.FileSystem.SDCard.SDCardSpiParameters)">
            <summary>
            Create an instance of SDCard for a SPI connected SD card.
            </summary>
            <param name="parameters">Connection parameters</param>
        </member>
        <member name="M:nanoFramework.System.IO.FileSystem.SDCard.Mount">
            <summary>
            Mount the SD memory card device 
            </summary>
            <remarks>
            This will try to mount the SD memory card on the specified interface.
            If the Card is not present or the card is unable to be read then an exception will be thrown.
            </remarks>
        </member>
        <member name="M:nanoFramework.System.IO.FileSystem.SDCard.Unmount">
            <summary>
            Unmount a mounted SD memory card.
            </summary>
        </member>
        <member name="M:nanoFramework.System.IO.FileSystem.SDCard.Dispose">
            <summary>
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.SDCard.SDInterfaceType">
            <summary>
            SDCard interface type.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDInterfaceType.System">
            <summary>
            Interface already defined in firmware. 
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDInterfaceType.Mmc">
            <summary>
            MMC SDcard interface type
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDInterfaceType.Spi">
            <summary>
            SPI SDCard interface type
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.SDCard.SDDataWidth">
            <summary>
            Data width to use on MMC SD protocol.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDDataWidth._1_bit">
            <summary>
            1-bit width.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDDataWidth._4_bit">
            <summary>
            4-bit width.
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.RemovableDeviceEventArgs">
            <summary>
            Contains argument values for Removable Devices events.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.RemovableDeviceEventArgs.Path">
            <summary>
            The path of the Removable Device.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.RemovableDeviceEventArgs.Event">
            <summary>
            The <see cref="T:nanoFramework.System.IO.FileSystem.RemovableDeviceEventArgs.RemovableDeviceEvent"/> occurred.
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.RemovableDeviceEventArgs.RemovableDeviceEvent">
            <summary>
            Specifies the type of event occurred with the Removable Device specified.
            </summary>
            <remarks>
            This enum is specific to nanoFramework. There is no equivalent in the UWP API.
            </remarks>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.RemovableDeviceEventArgs.RemovableDeviceEvent.Inserted">
            <summary>
            A Removable Device has been inserted.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.RemovableDeviceEventArgs.RemovableDeviceEvent.Removed">
            <summary>
            A Removable Device has been removed.
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.RemovableDeviceEventHandler">
            <summary>
            Provides an event handler that is called when a Removable Device event occurs.
            </summary>
            <param name="sender">Specifies the object that sent the Removable Device event. </param>
            <param name="e">Contains the Removable Device event arguments. </param>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.StorageEventManager">
            <summary>
            Event manager for Storage events.
            </summary>
        </member>
        <member name="E:nanoFramework.System.IO.FileSystem.StorageEventManager.RemovableDeviceInserted">
            <summary>
            Event that occurs when a Removable Device is inserted.
            </summary>
            <remarks>
            The <see cref="T:nanoFramework.System.IO.FileSystem.StorageEventManager"/> class raises <see cref="T:nanoFramework.System.IO.FileSystem.RemovableDeviceEventArgs"/> events when Removable Devices (typically SD Cards and USB mass storage device) are inserted and removed.
            
            To have a <see cref="T:nanoFramework.System.IO.FileSystem.StorageEventManager"/> object call an event-handling method when a <see cref="E:nanoFramework.System.IO.FileSystem.StorageEventManager.RemovableDeviceInserted"/> event occurs, 
            you must associate the method with a <see cref="T:nanoFramework.System.IO.FileSystem.RemovableDeviceEventHandler"/> delegate, and add this delegate to this event. 
            </remarks>
        </member>
        <member name="E:nanoFramework.System.IO.FileSystem.StorageEventManager.RemovableDeviceRemoved">
            <summary>
            Event that occurs when a Removable Device is removed.
            </summary>
            <remarks>
            The <see cref="T:nanoFramework.System.IO.FileSystem.StorageEventManager"/> class raises <see cref="T:nanoFramework.System.IO.FileSystem.RemovableDeviceEventArgs"/> events when Removable Devices (typically SD Cards and USB mass storage device) are inserted and removed.
            
            To have a <see cref="T:nanoFramework.System.IO.FileSystem.StorageEventManager"/> object call an event-handling method when a <see cref="E:nanoFramework.System.IO.FileSystem.StorageEventManager.RemovableDeviceRemoved"/> event occurs, 
            you must associate the method with a <see cref="T:nanoFramework.System.IO.FileSystem.RemovableDeviceEventHandler"/> delegate, and add this delegate to this event. 
            </remarks>
        </member>
    </members>
</doc>
